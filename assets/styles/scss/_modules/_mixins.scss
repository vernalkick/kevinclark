// RGBa Colors

@mixin color($fallback, $col, $trans:1) {
	color: $fallback;
	@include supported(rgba) { color: rgba($col, $trans); }
}

@mixin background-color($fallback, $col, $trans:1) {
	background-color: $fallback;
	@include supported(rgba) { background-color: rgba($col, $trans); }
}

@mixin border-color($fallback, $col, $trans:1) {
	border-color: $fallback;
	@include supported(rgba) { border-color: rgba($col, $trans); }
}

// Opacity

@mixin opacity($opacity) {
	zoom: 1;
	opacity: $opacity;
	$opacity: $opacity * 100;
	filter: alpha(opacity=#{$opacity});
}

// Inner Shadow (apply on container element)

@mixin innerShadow($size: 1px, $brad: 0px, $opacity: .1) {
	position: relative;
	&:before {
		content:'';
	    position:absolute;
	    width:100%;
	    height:100%;
	    -moz-box-shadow:inset 0px 0px 0px $size rgba(0, 0, 0, $opacity);
	    -webkit-box-shadow:inset 0px 0px 0px $size rgba(0, 0, 0, $opacity);
	    box-shadow:inset 0px 0px 0px $size rgba(0, 0, 0, $opacity);
	    border-radius: $brad;
	    z-index:999999;
	    pointer-events: none;
	    user-select: none;
	   	display: block;
	}
}

// Feature detection

@mixin unsupported($feat) {
	@if $feat == "flexbox" {
		.no-#{$feat}.no-#{$feat}legacy & { @content; }
	} @else {
		.no-#{$feat} & { @content; }
	}
}

@mixin supported($feat) {
	.#{$feat} & { @content; }
}

// IE Fixes

@mixin ie($version:false) {
	@if $version == false {
		@if $is_ie == true {
			@content;
		}
	} @else {
		.lt-ie#{$version} & { @content; }
	}
}

// Max/Min Width fixes

@mixin max-width($w) {
	@if $is_ie == true {
		width: $w;
	} @else {
		max-width: $w;
	}
}

@mixin min-width($w) {
	@if $is_ie == true {
		width: $w;
	} @else {
		min-width: $w;
	}
}

// Grid

@mixin gridswitch($point) {
	$viewport: $point;
	$columns_total: if($viewport > 600px, 6, 3);
	$gutter_width: if($viewport > 600px, 2, 5);
	$column_width: if($viewport > 600px, 15, 30);
}

$columns_total: 3;
$gutter_width: 5;
$column_width: 30;

@mixin column($columns, $parent_column_number:$columns_total, $side:left) {
	width: percentage((($columns * $column_width) + ($gutter-width * ($columns - 1))) / (($column_width * $parent_column_number) + ($gutter-width * ($parent_column_number - 1))));
	float: $side;
	@if $side == 'left' { margin-right: percentage($gutter-width / (($column_width * $parent_column_number) + ($gutter-width * ($parent_column_number - 1)))); }
	@if $side == 'right' { margin-left: percentage($gutter-width / (($column_width * $parent_column_number) + ($gutter-width * ($parent_column_number - 1)))); }
}

@mixin showgrid() {
	$c: $accent;
	@if $viewport > 600px {
		.wrap { @include linear-gradient(left, rgba($c, .2) 0%, rgba($c, .2) 15%, transparent 15%, transparent 17%, rgba($c, .2) 17%, rgba($c, .2) 32%, transparent 32%, transparent 34%, rgba($c, .2) 34%, rgba($c, .2) 49%, transparent 49%, transparent 51%, rgba($c, .2) 51%, rgba($c, .2) 66%, transparent 66%, transparent 68%, rgba($c, .2) 68%, rgba($c, .2) 83%, transparent 83%, transparent 85%, rgba($c, .2) 85%, rgba($c, .2) 100% ); }
	} @else {
		.wrap { @include linear-gradient(left, rgba($c, .2) 0%, rgba($c, .2) 30%, transparent 30%, transparent 35%, rgba($c, .2) 35%, rgba($c, .2) 65%, transparent 65%, transparent 70%, rgba($c, .2) 70%, rgba($c, .2) 100%); }
	}
}

// Typography

@mixin ligatures{
	-moz-font-feature-settings:"liga=1, dlig=1";
  	-ms-font-feature-settings:"liga", "dlig";
  	-o-font-feature-settings:"liga", "dlig";
  	-webkit-font-feature-settings:"liga", "dlig";
  	font-feature-settings:"liga", "dlig";
}

@mixin ellipsis {
	white-space: nowrap;
	width: 100%;
	overflow: hidden;
	text-overflow: ellipsis;
	display: block;
}

@mixin hyphenate {
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
}

// Animations

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

// Icon Font

@mixin icon() {
	font-family: 'KevinClarkIconsRegular';
	font-style: normal;
	font-weight: normal;
	text-decoration: none;
	text-rendering: optimizeLegibility;
	white-space: nowrap;
	-webkit-font-feature-settings: "liga";
	-moz-font-feature-settings: "liga=1";
	-moz-font-feature-settings: "liga";
	-ms-font-feature-settings: "liga" 1;
	-o-font-feature-settings: "liga";
	font-feature-settings: "liga";
	-webkit-font-smoothing: antialiased;
}

// Media-Queries

$grid-breakpoints: "xsmall" 19% 8% 4, "small" 9.875% 3% 8, "medium" 9.875% 3% 8, "large" 4.6666666667% 4% 12, "xlarge" 4.6666666667% 4% 12;
$breakpoints: 'xsmall' 400px, 'small' 600px, 'medium' 800px, 'large' 1000px, 'xlarge' 1200px;

$current-breakpoint: nth(nth($grid-breakpoints, 1), 1);
$column-total-number: 4;

$container: 1;
$container-width: false;

@mixin column($column-number, $position:false, $container:false) {
	@each $gbkpt in $grid-breakpoints {
		@if $current-breakpoint == nth($gbkpt, 1) {
			$column-width: nth($gbkpt, 2);
			$gutter-width: nth($gbkpt, 3);
			$column-total-number: nth($gbkpt, 4);
			@if $container == false {
				$container-width: 1;
			} @else {
				$container-width: ($column-width * $container) + ($gutter-width * ($container - 1));
			}
			@include column-generator($column-width, $gutter-width, $column-number, $column-total-number, $position, $container-width);
		}
	}
}

@mixin column-generator($column-width, $gutter-width, $column-number, $column-total-number, $position, $container-width) {
	@if $container-width == 1 {
		width: ($column-width * $column-number) + ($gutter-width * ($column-number - 1));
	} @else {
		width: percentage((($column-width * $column-number) + ($gutter-width * ($column-number - 1))) / $container-width);
	}
	@if $column-number < $column-total-number {
		float: left;
		@if $position != 'last' {
			@if $container-width == 1 { margin-right: $gutter-width; }
			@else { margin-right: percentage($gutter-width / $container-width); }
		}
	}
}

@mixin push($side, $column-number) {
	margin-#{$side}: ($column-width * $column-number) + ($gutter-width * $column-number);
}

// Our respond-to mixin, with the new hotness?
// A little more complicated than previous respond-to mixins, but now runs off of a variable. This is also Rev 1 so if someone can help me make it better, I'm all ears.
// We need to start with a defaulted breakpoints variable.


@mixin mq($context) {
$current-breakpoint: $context;
  @if $breakpoints != false {
    // Check to see if the 2nd item is a number. If it is, we've got a single query
    @if type-of(nth($breakpoints, 2)) == 'number' {
      // Check to see if the context matches the breakpoint namespace
      @if $context == nth($breakpoints, 1) {
        // Call Media Query Generator
        @include media-query-gen($breakpoints) {
          @content;
        }
      }
    }
    // Else, loop over all of them
    @else {
      // Loop over each breakpoint and check context
      @each $bkpt in $breakpoints {
        // If context is correctâ€¦
        @if $context == nth($bkpt, 1) {
          // Call the generator!
          @include media-query-gen($bkpt) {
            @content;
          }
        }
      }
    }
  }
}

// This functionality gets used twice so I turned it into its own mixin.

@mixin media-query-gen($bpt) {
  // Get length of breakpoint variable, minus the namespace
  $length: length($bpt);
  // Go through all of the breakpoint items, starting at the second, and add them to a variable to be passed into the media query mixin
  $mq: false !default;
  @for $i from 2 through $length {
    // If it's the first item, override $mq
    @if $i == 2 {
      $mq: nth($bpt, $i);
    }
    // Else, join $mq
    @else {
      $mq: join($mq, nth($bpt, $i));
    }
  }
  // Call Media Query mixin
  @include media-query($mq) {
    @content;
  }
}

// Slightly modified version of my Media Query Mixin (https://gist.github.com/2490750) from earlier, modified to accommodate list input
@mixin media-query($value, $operator: 'min-width', $query: 'screen') {
  // If a list is passed in for value, break it into value, operator, and query
  @if type-of($value) == 'list' {
    $mq: $value;

    @for $i from 1 through length($mq) {
      @if $i == 1 {
        $value: nth($mq, 1);
      }
      @else if $i == 2 {
        $operator: nth($mq, 2);
      }
      @else if $i == 3 {
        $query: nth($mq, 3);
      }
    }
  }

  @media #{$query} and (#{$operator}: #{$value}) {
    @content;
  }
}